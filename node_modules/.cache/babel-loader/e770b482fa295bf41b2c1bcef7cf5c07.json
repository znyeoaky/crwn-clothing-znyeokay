{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { rootReducer } from './root-reducer'; // const loggerMiddleware = (store) => (next) => (action) => {\n//   if(!action.type){\n//     return next(action);\n//   }\n//   console.log('type: ', action.type);\n//   console.log('payload: ', action.payload);\n//   console.log('currentState: ', store.getState());\n//   next(action);\n//   console.log('next state: ', store.getState());\n// }\n// const middleWares = [loggerMiddleware];\n\nconst middleWares = [process.env.NODE_ENV === 'development' && logger].filter(Boolean);\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\nexport const store = createStore(rootReducer, undefined, composedEnhancers);","map":{"version":3,"sources":["/Users/nanye/Desktop/crwn-clothing/src/store/store.js"],"names":["compose","createStore","applyMiddleware","logger","rootReducer","middleWares","process","env","NODE_ENV","filter","Boolean","composedEnhancers","store","undefined"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,SAASC,WAAT,QAA4B,gBAA5B,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;;AACA,MAAMC,WAAW,GAAG,CAACC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CL,MAA3C,EAAmDM,MAAnD,CAClBC,OADkB,CAApB;AAIA,MAAMC,iBAAiB,GAAGX,OAAO,CAACE,eAAe,CAAC,GAAGG,WAAJ,CAAhB,CAAjC;AAEA,OAAO,MAAMO,KAAK,GAAGX,WAAW,CAACG,WAAD,EAAcS,SAAd,EAAyBF,iBAAzB,CAAzB","sourcesContent":["import { compose, createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\n\nimport { rootReducer } from './root-reducer';\n\n// const loggerMiddleware = (store) => (next) => (action) => {\n//   if(!action.type){\n//     return next(action);\n//   }\n\n//   console.log('type: ', action.type);\n//   console.log('payload: ', action.payload);\n//   console.log('currentState: ', store.getState());\n\n//   next(action);\n//   console.log('next state: ', store.getState());\n\n// }\n\n\n// const middleWares = [loggerMiddleware];\nconst middleWares = [process.env.NODE_ENV === 'development' && logger].filter(\n  Boolean\n);\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\n\nexport const store = createStore(rootReducer, undefined, composedEnhancers);\n"]},"metadata":{},"sourceType":"module"}