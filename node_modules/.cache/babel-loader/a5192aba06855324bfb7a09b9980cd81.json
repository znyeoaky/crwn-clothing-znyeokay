{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger'; // import thunk from 'redux-thunk';\n\nimport createSagaMiddleware from 'redux-saga';\nimport { rootSaga } from './root-saga';\nimport { rootReducer } from './root-reducer';\n;\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['cart']\n};\n/*\n  key: We want to start from the root level.\n  storage(shorthand): So by default in any web browser, \n  this will just use local storage, which is what we want.\n  blacklist: an array of strings(root-reducer.js), which reducer you don't want to persist.\n*/\n\nconst sagaMiddleware = createSagaMiddleware();\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // const middleWares = [logger];\n// production // development\n\nconst middleWares = [process.env.NODE_ENV === 'development' && logger, sagaMiddleware].filter(middleware => Boolean(middleware));\nconst composedEnhancer = process.env.NODE_ENV !== 'production' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst composedEnhancers = composedEnhancer(applyMiddleware(...middleWares));\nexport const store = createStore(persistedReducer, undefined, composedEnhancers);\nsagaMiddleware.run(rootSaga);\nexport const persistor = persistStore(store);","map":{"version":3,"sources":["/Users/nanye/Desktop/crwn-clothing/src/store/store.ts"],"names":["compose","createStore","applyMiddleware","persistStore","persistReducer","storage","logger","createSagaMiddleware","rootSaga","rootReducer","persistConfig","key","whitelist","sagaMiddleware","persistedReducer","middleWares","process","env","NODE_ENV","filter","middleware","Boolean","composedEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composedEnhancers","store","undefined","run","persistor"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAkE,OAAlE;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA4D,eAA5D;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AASC;AAMD,MAAMC,aAAoC,GAAG;AAC3CC,EAAAA,GAAG,EAAE,MADsC;AAE3CN,EAAAA,OAF2C;AAG3CO,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHgC,CAA7C;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AAEA,MAAMO,gBAAgB,GAAGV,cAAc,CAACM,aAAD,EAAgBD,WAAhB,CAAvC,C,CAEA;AACA;;AACA,MAAMM,WAAW,GAAG,CAClBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CZ,MADxB,EAElBO,cAFkB,EAGlBM,MAHkB,CAGVC,UAAD,IAA0CC,OAAO,CAACD,UAAD,CAHtC,CAApB;AAKA,MAAME,gBAAgB,GACpBN,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IACAK,MADA,IAEAA,MAAM,CAACC,oCAHgB,IAIzBxB,OAJA;AAOA,MAAMyB,iBAAiB,GAAGH,gBAAgB,CAACpB,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAA1C;AAEA,OAAO,MAAMW,KAAK,GAAGzB,WAAW,CAC9Ba,gBAD8B,EAE9Ba,SAF8B,EAG9BF,iBAH8B,CAAzB;AAMPZ,cAAc,CAACe,GAAf,CAAmBpB,QAAnB;AAEA,OAAO,MAAMqB,SAAS,GAAG1B,YAAY,CAACuB,KAAD,CAA9B","sourcesContent":["import { compose, createStore, applyMiddleware, Middleware } from 'redux';\nimport { persistStore, persistReducer, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n// import thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootSaga } from './root-saga';\nimport { rootReducer } from './root-reducer';\n\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\ndeclare global {\n  interface Window{\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\n  }\n};\n\ntype ExtendedPersistConfig = PersistConfig<RootState> & {\n  whitelist: (keyof RootState)[];\n}\n\nconst persistConfig: ExtendedPersistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['cart'],\n};\n/*\n  key: We want to start from the root level.\n  storage(shorthand): So by default in any web browser, \n  this will just use local storage, which is what we want.\n  blacklist: an array of strings(root-reducer.js), which reducer you don't want to persist.\n*/\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// const middleWares = [logger];\n// production // development\nconst middleWares = [\n  process.env.NODE_ENV === 'development' && logger, \n  sagaMiddleware\n].filter((middleware): middleware is Middleware => Boolean(middleware));\n\nconst composedEnhancer = (\n  process.env.NODE_ENV !== 'production' && \n  window && \n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || \ncompose;\n\n\nconst composedEnhancers = composedEnhancer(applyMiddleware(...middleWares));\n\nexport const store = createStore(\n  persistedReducer, \n  undefined, \n  composedEnhancers\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport const persistor = persistStore(store);\n"]},"metadata":{},"sourceType":"module"}