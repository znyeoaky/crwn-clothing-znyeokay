{"ast":null,"code":"var _jsxFileName = \"/Users/nanye/Desktop/crwn-clothing/src/components/payment-form/payment-form.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\nimport Button, { BUTTON_TYPE_CLASSES } from '../button/button.component';\nimport { FormContainer, PaymentFormContainer } from './payment-form.styles'; // import { PaymentButton, PaymentFormContainer } from './payment-form.styles';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PaymentForm = () => {\n  _s();\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async e => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        amount: amount * 100\n      })\n    }).then(res => res.json()); // console.log(response);\n\n    const {\n      paymentIntent: {\n        client_secret\n      }\n    } = response; // console.log(client_secret);\n\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest'\n        }\n      }\n    });\n\n    if (paymentResult.error) {\n      alert(paymentResult.error.message);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful!');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PaymentFormContainer, {\n    children: /*#__PURE__*/_jsxDEV(FormContainer, {\n      onSubmit: paymentHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Credit Card Payment: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: isP,\n        buttonType: BUTTON_TYPE_CLASSES.inverted,\n        children: \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaymentForm, \"zeZvNGpoSXJVIJ/CUzfiu8Kc5to=\", false, function () {\n  return [useStripe, useElements, useSelector, useSelector];\n});\n\n_c = PaymentForm;\nexport default PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["/Users/nanye/Desktop/crwn-clothing/src/components/payment-form/payment-form.component.jsx"],"names":["useState","useSelector","CardElement","useStripe","useElements","selectCartTotal","selectCurrentUser","Button","BUTTON_TYPE_CLASSES","FormContainer","PaymentFormContainer","PaymentForm","stripe","elements","amount","currentUser","isProcessingPayment","setIsProcessingPayment","paymentHandler","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","then","res","json","paymentIntent","client_secret","paymentResult","confirmCardPayment","payment_method","card","getElement","billing_details","name","displayName","error","alert","message","status","isP","inverted"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,WAAjC,QAAoD,yBAApD;AAEA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA,OAAOC,MAAP,IAAgBC,mBAAhB,QAA0C,4BAA1C;AACA,SAASC,aAAT,EAAwBC,oBAAxB,QAAoD,uBAApD,C,CACA;;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,MAAM,GAAGb,WAAW,CAACI,eAAD,CAA1B;AACA,QAAMU,WAAW,GAAGd,WAAW,CAACK,iBAAD,CAA/B;AACA,QAAM,CAACU,mBAAD,EAAsBC,sBAAtB,IAAgDjB,QAAQ,CAAC,KAAD,CAA9D;;AAEA,QAAMkB,cAAc,GAAG,MAAMC,CAAN,IAAY;AACjCA,IAAAA,CAAC,CAACC,cAAF;;AAEA,QAAG,CAACR,MAAD,IAAW,CAACC,QAAf,EAAwB;AACtB;AACD;;AAED,UAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAAD,EAA8C;AACxEC,MAAAA,MAAM,EAAC,MADiE;AAExEC,MAAAA,OAAO,EAAC;AACN,wBAAgB;AADV,OAFgE;AAKxEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,QAAAA,MAAM,EAAEA,MAAM,GAAG;AAAnB,OAAf;AALkE,KAA9C,CAAL,CAMpBc,IANoB,CAMfC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANQ,CAAvB,CAPiC,CAejC;;AACA,UAAM;AACJC,MAAAA,aAAa,EAAE;AAAEC,QAAAA;AAAF;AADX,QAEFX,QAFJ,CAhBiC,CAmBjC;;AAEA,UAAMY,aAAa,GAAG,MAAMrB,MAAM,CAACsB,kBAAP,CAA0BF,aAA1B,EAAyC;AACnEG,MAAAA,cAAc,EAAC;AACbC,QAAAA,IAAI,EAACvB,QAAQ,CAACwB,UAAT,CAAoBnC,WAApB,CADQ;AAEboC,QAAAA,eAAe,EAAE;AACfC,UAAAA,IAAI,EAAExB,WAAW,GAAGA,WAAW,CAACyB,WAAf,GAA6B;AAD/B;AAFJ;AADoD,KAAzC,CAA5B;;AASA,QAAIP,aAAa,CAACQ,KAAlB,EAAyB;AACvBC,MAAAA,KAAK,CAACT,aAAa,CAACQ,KAAd,CAAoBE,OAArB,CAAL;AACD,KAFD,MAEO;AACL,UAAIV,aAAa,CAACF,aAAd,CAA4Ba,MAA5B,KAAuC,WAA3C,EAAwD;AACtDF,QAAAA,KAAK,CAAC,qBAAD,CAAL;AACD;AACF;AACF,GArCD;;AAyCA,sBACE,QAAC,oBAAD;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,QAAQ,EAAExB,cAAzB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAEiB;AAAA;AAAA;AAAA;AAAA,cAFjB,eAGE,QAAC,MAAD;AACA,QAAA,QAAQ,EAAE2B,GADV;AAEE,QAAA,UAAU,EAAErC,mBAAmB,CAACsC,QAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA7DD;;GAAMnC,W;UACWR,S,EACEC,W,EACFH,W,EACKA,W;;;KAJhBU,W;AA+DN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nimport { selectCartTotal } from '../../store/cart/cart.selector';\nimport { selectCurrentUser } from '../../store/user/user.selector';\n\nimport Button, {BUTTON_TYPE_CLASSES} from '../button/button.component';\nimport { FormContainer, PaymentFormContainer } from './payment-form.styles';\n// import { PaymentButton, PaymentFormContainer } from './payment-form.styles';\n\nconst PaymentForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const amount = useSelector(selectCartTotal);\n  const currentUser = useSelector(selectCurrentUser);\n  const [isProcessingPayment, setIsProcessingPayment] = useState(false);\n\n  const paymentHandler = async(e) => {\n    e.preventDefault();\n\n    if(!stripe || !elements){\n      return;\n    }\n\n    const response = await fetch('/.netlify/functions/create-payment-intent', {\n      method:'post',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ amount: amount * 100 }),\n    }).then(res => res.json());\n\n    // console.log(response);\n    const {\n      paymentIntent: { client_secret }\n    } = response;\n    // console.log(client_secret);\n\n    const paymentResult = await stripe.confirmCardPayment(client_secret, {\n      payment_method:{\n        card:elements.getElement(CardElement),\n        billing_details: {\n          name: currentUser ? currentUser.displayName : 'Guest',\n        },      \n      }\n    })\n\n    if (paymentResult.error) {\n      alert(paymentResult.error.message);\n    } else {\n      if (paymentResult.paymentIntent.status === 'succeeded') {\n        alert('Payment Successful!');\n      }\n    }\n  };\n\n\n\n  return (\n    <PaymentFormContainer>\n      <FormContainer onSubmit={paymentHandler}>\n        <h2>Credit Card Payment: </h2>\n        <CardElement /><br />\n        <Button \n        disabled={isP}\n          buttonType={BUTTON_TYPE_CLASSES.inverted}>\n          Pay now\n        </Button>\n      </FormContainer>\n    </PaymentFormContainer>\n  );\n};\n\nexport default PaymentForm;"]},"metadata":{},"sourceType":"module"}