{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux'; // import logger from 'redux-logger';\n\nimport { rootReducer } from './root-reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst loggerMiddleware = store => next => action => {\n  if (!action.type) {\n    return next(action);\n  }\n\n  console.log('type: ', action.type);\n  console.log('payload: ', action.payload);\n  console.log('currentState: ', store.getState());\n  next(action);\n  console.log('next state: ', store.getState());\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['user']\n};\n/*\n  key: We want to start from the root level.\n  storage(shorthand): So by default in any web browser, \n  this will just use local storage, which is what we want.\n  blacklist: an array of strings(), which reducer you don't want to persist.\n*/\n\nconst middleWares = [loggerMiddleware]; // const middleWares = [process.env.NODE_ENV === 'development' && logger].filter(\n//   Boolean\n// );\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\nexport const store = createStore(rootReducer, undefined, composedEnhancers);","map":{"version":3,"names":["compose","createStore","applyMiddleware","rootReducer","persistStore","persistReducer","storage","loggerMiddleware","store","next","action","type","console","log","payload","getState","persistConfig","key","blacklist","middleWares","composedEnhancers","undefined"],"sources":["/Users/nanye/Desktop/crwn-clothing/src/store/store.js"],"sourcesContent":["import { compose, createStore, applyMiddleware } from 'redux';\n// import logger from 'redux-logger';\nimport { rootReducer } from './root-reducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst loggerMiddleware = (store) => (next) => (action) => {\n  if(!action.type){\n    return next(action);\n  }\n\n  console.log('type: ', action.type);\n  console.log('payload: ', action.payload);\n  console.log('currentState: ', store.getState());\n\n  next(action);\n  console.log('next state: ', store.getState());\n\n}\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['user'],\n};\n/*\n  key: We want to start from the root level.\n  storage(shorthand): So by default in any web browser, \n  this will just use local storage, which is what we want.\n  blacklist: an array of strings(), which reducer you don't want to persist.\n*/\n\nconst middleWares = [loggerMiddleware];\n// const middleWares = [process.env.NODE_ENV === 'development' && logger].filter(\n//   Boolean\n// );\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\n\nexport const store = createStore(rootReducer, undefined, composedEnhancers);\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD,C,CACA;;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAYC,IAAD,IAAWC,MAAD,IAAY;EACxD,IAAG,CAACA,MAAM,CAACC,IAAX,EAAgB;IACd,OAAOF,IAAI,CAACC,MAAD,CAAX;EACD;;EAEDE,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,MAAM,CAACC,IAA7B;EACAC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAM,CAACI,OAAhC;EACAF,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BL,KAAK,CAACO,QAAN,EAA9B;EAEAN,IAAI,CAACC,MAAD,CAAJ;EACAE,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,KAAK,CAACO,QAAN,EAA5B;AAED,CAZD;;AAcA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MADe;EAEpBX,OAFoB;EAGpBY,SAAS,EAAE,CAAC,MAAD;AAHS,CAAtB;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,CAACZ,gBAAD,CAApB,C,CACA;AACA;AACA;;AAEA,MAAMa,iBAAiB,GAAGpB,OAAO,CAACE,eAAe,CAAC,GAAGiB,WAAJ,CAAhB,CAAjC;AAEA,OAAO,MAAMX,KAAK,GAAGP,WAAW,CAACE,WAAD,EAAckB,SAAd,EAAyBD,iBAAzB,CAAzB"},"metadata":{},"sourceType":"module"}