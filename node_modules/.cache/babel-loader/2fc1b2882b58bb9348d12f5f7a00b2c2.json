{"ast":null,"code":"import { compose, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger'; // import thunk from 'redux-thunk';\n\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './root-reducer';\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['user']\n};\n/*\n  key: We want to start from the root level.\n  storage(shorthand): So by default in any web browser, \n  this will just use local storage, which is what we want.\n  blacklist: an array of strings(root-reducer.js), which reducer you don't want to persist.\n*/\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // const middleWares = [logger];\n// production\n\nconst middleWares = [process.env.NODE_ENV === 'development' && logger, thunk].filter(Boolean); // const thunkMiddleware = (store) => (next) => (action) => {\n//   if(typeof(action) === 'function'){\n//     action(dispatch);\n//   }\n// }\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\nexport const store = createStore(persistedReducer, undefined, composedEnhancers);\nexport const persistor = persistStore(store);","map":{"version":3,"names":["compose","createStore","applyMiddleware","persistStore","persistReducer","storage","logger","createSagaMiddleware","rootReducer","persistConfig","key","blacklist","persistedReducer","middleWares","process","env","NODE_ENV","thunk","filter","Boolean","composedEnhancers","store","undefined","persistor"],"sources":["/Users/nanye/Desktop/crwn-clothing/src/store/store.js"],"sourcesContent":["import { compose, createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n// import thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\n\n\nimport { rootReducer } from './root-reducer';\n\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['user'],\n};\n/*\n  key: We want to start from the root level.\n  storage(shorthand): So by default in any web browser, \n  this will just use local storage, which is what we want.\n  blacklist: an array of strings(root-reducer.js), which reducer you don't want to persist.\n*/\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// const middleWares = [logger];\n// production\nconst middleWares = [\n  process.env.NODE_ENV === 'development' && logger, \n  thunk].filter(\n  Boolean\n);\n\n// const thunkMiddleware = (store) => (next) => (action) => {\n//   if(typeof(action) === 'function'){\n//     action(dispatch);\n//   }\n// }\n\n\nconst composedEnhancers = compose(applyMiddleware(...middleWares));\n\nexport const store = createStore(\n  persistedReducer, \n  undefined, \n  composedEnhancers\n);\n\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAGA,SAASC,WAAT,QAA4B,gBAA5B;AAGA,MAAMC,aAAa,GAAG;EACpBC,GAAG,EAAE,MADe;EAEpBL,OAFoB;EAGpBM,SAAS,EAAE,CAAC,MAAD;AAHS,CAAtB;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAGR,cAAc,CAACK,aAAD,EAAgBD,WAAhB,CAAvC,C,CAEA;AACA;;AACA,MAAMK,WAAW,GAAG,CAClBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CV,MADxB,EAElBW,KAFkB,EAEXC,MAFW,CAGlBC,OAHkB,CAApB,C,CAMA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,iBAAiB,GAAGpB,OAAO,CAACE,eAAe,CAAC,GAAGW,WAAJ,CAAhB,CAAjC;AAEA,OAAO,MAAMQ,KAAK,GAAGpB,WAAW,CAC9BW,gBAD8B,EAE9BU,SAF8B,EAG9BF,iBAH8B,CAAzB;AAMP,OAAO,MAAMG,SAAS,GAAGpB,YAAY,CAACkB,KAAD,CAA9B"},"metadata":{},"sourceType":"module"}